type: edu
custom_name: stage3
files:
- name: browser.py
  visible: true
  text: |
    import os, sys

    nytimes_com = '''
    This New Liquid Is Magnetic, and Mesmerizing

    Scientists have created "soft" magnets that can flow
    and change shape, and that could be a boon to medicine
    and robotics. (Source: New York Times)


    Most Wikipedia Profiles Are of Men. This Scientist Is Changing That.

    Jessica Wade has added nearly 700 Wikipedia biographies for
     important female and minority scientists in less than two
     years.

    '''

    bloomberg_com = '''
    The Space Race: From Apollo 11 to Elon Musk

    It's 50 years since the world was gripped by historic images
     of Apollo 11, and Neil Armstrong -- the first man to walk
     on the moon. It was the height of the Cold War, and the charts
     were filled with David Bowie's Space Oddity, and Creedence's
     Bad Moon Rising. The world is a very different place than
     it was 5 decades ago. But how has the space race changed since
     the summer of '69? (Source: Bloomberg)


    Twitter CEO Jack Dorsey Gives Talk at Apple Headquarters

    Twitter and Square Chief Executive Officer Jack Dorsey
     addressed Apple Inc. employees at the iPhone makerâ€™s headquarters
     Tuesday, a signal of the strong ties between the Silicon Valley giants.
    '''

    BLOOMBERG_URL = "bloomberg.com"
    NYTIMES_URL = "nytimes.com"

    acceptable_URLs = [BLOOMBERG_URL, NYTIMES_URL]

    def is_url(string):
        return "." in string

    saved_files = []

    cache_path = sys.argv[1]

    if not os.path.exists(cache_path):
        os.mkdir(cache_path)

    keep_going = True

    while keep_going:



        valid_input = False
        while not valid_input:
            response = input()
            if response == "exit":
                keep_going = False
                valid_input = True
            elif is_url(response) and response in acceptable_URLs:
                valid_input = True
                if response == BLOOMBERG_URL:
                    print(bloomberg_com)

                    filename = response.split('.')[0]

                    with open(os.path.join(cache_path, f"{filename}"), "w") as f:
                        f.write(bloomberg_com)
                        saved_files.append(filename)

                elif response == NYTIMES_URL:
                    print(nytimes_com)

                    filename = response.split('.')[0]

                    with open(os.path.join(cache_path, f"{filename}"), "w") as f:
                        f.write(nytimes_com)
                        saved_files.append(filename)
                # print(filename)
            elif response in saved_files:
                valid_input = True

                with open(os.path.join(cache_path, f"{response}"), "r") as f:
                    contents = f.read()
                    print(contents)
            else:
                print("Invalid parameter error")
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin='bloomberg.com\nbloomberg\nexit',
                    attach=('Bloomberg', 'New York Times', 'bloomberg'),
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='nytimes.com\nnytimes\nexit',
                    attach=('New York Times', 'Bloomberg', 'nytimes'),
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='blooomberg.com\nexit',
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='blooomberg.com\nnytimes.com\nexit',
                    attach=(None, 'New York Times', 'Bloomberg', 'nytimes'),
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='nytimescom\nbloomberg.com\nexit',
                    attach=(None, 'Bloomberg', 'New York Times', 'bloomberg'),
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='bloomberg.com\nnytimes.com\nback\nexit',
                    attach={
                        'This New Liquid Is Magnetic, and Mesmerizing': (1, 'New York Times'),
                        'The Space Race: From Apollo 11 to Elon Musk': (2, 'Bloomberg')
                    },
                    args=['tb_tabs']
                ),
                TestCase(
                    stdin='nytimes.com\nbloomberg.com\nback\nexit',
                    attach={
                        'This New Liquid Is Magnetic, and Mesmerizing': (2, 'New York Times'),
                        'The Space Race: From Apollo 11 to Elon Musk': (1, 'Bloomberg')
                    },
                    args=['tb_tabs']
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> int:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            for path, dirs, files in os.walk(path_for_tabs):
                for file in files:
                    with open(os.path.join(path_for_tabs, file), 'r') as tab:
                        try:
                            content = tab.read()
                        except UnicodeDecodeError:
                            return -1
                        if right_word in content:
                            return 1
                break

            return 0

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if 'error' in reply.lower():
                    return CheckResult.correct()
                else:
                    return CheckResult.wrong('There was no "error" word, but should be.')

            # Correct URL
            if isinstance(attach, tuple):

                if len(attach) == 4:
                    _, *attach = attach
                    if 'error' not in reply.lower():
                        return CheckResult.wrong('There was no "error" word, but should be.')

                right_word, wrong_word, correct_file_name = attach

                path_for_tabs = 'tb_tabs'

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong(
                        "Can't find a directory \"" + path_for_tabs + "\" "
                        "in which you should save your web pages.")

                check_files_result = self._check_files(path_for_tabs, right_word)
                if not check_files_result:
                    return CheckResult.wrong(
                        "Seems like you didn\'t save the web page "
                        "\"" + right_word + "\" into the "
                        "directory \"" + path_for_tabs + "\". "
                        "This file with page should be named \"" + correct_file_name + "\"")
                elif check_files_result == -1:
                    return CheckResult.wrong('An error occurred while reading your saved tab. '
                                             'Perhaps you used the wrong encoding?')

                try:
                    shutil.rmtree(path_for_tabs)
                except PermissionError:
                    return CheckResult.wrong("Impossible to remove the directory for tabs. Perhaps you haven't closed some file?")

                if wrong_word in reply:
                    return CheckResult.wrong('It seems like you printed wrong variable')

                if right_word in reply:
                    return CheckResult.correct()

                return CheckResult.wrong('You printed neither bloomberg_com nor nytimes_com')

            if isinstance(attach, dict):
                for key, value in attach.items():
                    count, site = value
                    real_count = reply.count(key)
                    if reply.count(key) != count:
                        return CheckResult.wrong(
                            f'The site "{site}" should be displayed {count} time(s).\n'
                            f'Actually displayed: {real_count} time(s).'
                        )
                return CheckResult.correct()


    TextBasedBrowserTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/7212#comment
status: Solved
record: 2
